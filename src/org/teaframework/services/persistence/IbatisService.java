/**
 * @(#)IbatisService.java
 * 
 * Tea Service-Oriented Java/J2EE Application Framework
 * 
 * Copyright(c) Tea Framework Team
 *  
 * Licensed under the GNU LGPL, Version 2.1 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at  
 * 
 * http://www.gnu.org/copyleft/lesser.html
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 * 
 * For more information, please visit:
 * http://sourceforge.net/projects/teaframework
 */

package org.teaframework.services.persistence;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.teaframework.exception.DAOException;

import com.ibatis.common.util.PaginatedList;
import com.ibatis.dao.client.DaoManager;
import com.ibatis.sqlmap.client.SqlMapException;
import com.ibatis.sqlmap.client.SqlMapSession;
import com.ibatis.sqlmap.client.event.RowHandler;

/**
 * <p>
 * Ibatis persistence service wrapper.
 * </p>
 * 
 * @author <a href="mailto:founder_chen@yahoo.com.cn">Peter Cheng </a>
 * @version $Revision: 1.7 $ $Date: 2006/02/15 08:45:45 $
 * @version Revision: 1.0
 */

public interface IbatisService {

	/**
	 * Get DaoManager.
	 * 
	 * @return
	 * @throws SqlMapException
	 */
	DaoManager getDaoManager() throws SqlMapException;

	/**
	 * Returns a single threaded SqlMapSession implementation for use by one
	 * user.
	 * 
	 * @see org.teaframework.services.persistence.IbatisService#openSession()
	 */
	SqlMapSession openSession() throws SQLException;

	/**
	 * Commits the currently started transaction.
	 * 
	 * @throws SQLException
	 */
	void commit() throws SQLException;

	/**
	 * Close session.
	 */
	void closeSession() throws SQLException;

	/**
	 * Executes a mapped SQL INSERT statement. Insert is a bit different from
	 * other update methods, as it provides facilities for returning the primary
	 * key of the newly inserted row (rather than the effected rows). This
	 * functionality is of course optional.
	 * 
	 * @param id
	 * @param parameterObject
	 * @return The primary key of the newly inserted row. This might be
	 *         automatically generated by the RDBMS, or selected from a sequence
	 *         table or other source.
	 * @throws SQLException
	 * @throws DAOException
	 */
	Object insert(String id, Object parameterObject) throws SQLException,
			DAOException;

	/**
	 * Executes a mapped SQL UPDATE statement. Update can also be used for any
	 * other update statement type, such as inserts and deletes. Update returns
	 * the number of rows effected.
	 * 
	 * @param id
	 * @param parameterObject
	 * @return The number of rows effected.
	 * @throws SQLException
	 * @throws DAOException
	 */
	int update(String id, Object parameterObject) throws SQLException,
			DAOException;

	/**
	 * Executes a mapped SQL DELETE statement. Delete returns the number of rows
	 * effected.
	 * 
	 * @param id
	 * @param parameterObject
	 * @return The number of rows effected
	 * @throws SQLException
	 * @throws DAOException
	 */
	int delete(String id, Object parameterObject) throws SQLException,
			DAOException;

	/**
	 * Executes a mapped SQL SELECT statement that returns data to populate a
	 * single object instance. <p/>The parameter object is generally used to
	 * supply the input data for the WHERE clause parameter(s) of the SELECT
	 * statement.
	 * 
	 * @param id
	 *            The name of the statement to execute.
	 * @param parameterObject
	 *            The parameter object (e.g. JavaBean, Map, XML etc.).
	 * @return The single result object populated with the result set data.
	 */
	Object queryForObject(String id, Object parameterObject)
			throws SQLException, DAOException;

	/**
	 * Executes a mapped SQL SELECT statement that returns data to populate the
	 * supplied result object.
	 * 
	 * @param id
	 * @param parameterObject
	 * @param resultObject
	 * @return The single result object as supplied by the resultObject
	 *         parameter, populated with the result set data.
	 * @throws SQLException
	 * @throws DAOException
	 */
	Object queryForObject(String id, Object parameterObject, Object resultObject)
			throws SQLException, DAOException;

	/**
	 * Executes a mapped SQL SELECT statement that returns data to populate a
	 * number of result objects.
	 * 
	 * @param id
	 * @param parameterObject
	 * @return A List of result objects.
	 * @throws SQLException
	 * @throws DAOException
	 */
	List queryForList(String id, Object parameterObject) throws SQLException,
			DAOException;

	/**
	 * Executes a mapped SQL SELECT statement that returns data to populate a
	 * number of result objects within a certain range.
	 * 
	 * @param id
	 * @param parameterObject
	 * @param skip
	 * @param max
	 * @return A List of result objects.
	 * @throws SQLException
	 * @throws DAOException
	 */
	List queryForList(String id, Object parameterObject, int skip, int max)
			throws SQLException, DAOException;

	/**
	 * Executes a mapped SQL SELECT statement that returns a number of result
	 * objects that will be handled one at a time by a RowHandler.
	 * 
	 * @param id
	 * @param parameterObject
	 * @param rowHandler
	 * @throws SQLException
	 * @throws DAOException
	 */
	void queryWithRowHandler(String id, Object parameterObject,
			RowHandler rowHandler) throws SQLException, DAOException;

	/**
	 * Executes a mapped SQL SELECT statement that returns data to populate a
	 * number of result objects a page at a time.
	 * 
	 * @param id
	 * @param parameterObject
	 * @param pageSize
	 * @return A PaginatedList of result objects.
	 * @throws SQLException
	 * @throws DAOException
	 */
	PaginatedList queryForPaginatedList(String id, Object parameterObject,
			int pageSize) throws SQLException, DAOException;

	/**
	 * Executes a mapped SQL SELECT statement that returns data to populate a
	 * number of result objects that will be keyed into a Map.
	 * 
	 * @param id
	 * @param parameterObject
	 * @param keyProp
	 * @return A Map keyed by keyProp with values being the result object
	 *         instance.
	 * @throws SQLException
	 * @throws DAOException
	 */
	Map queryForMap(String id, Object parameterObject, String keyProp)
			throws SQLException, DAOException;

	/**
	 * Executes a mapped SQL SELECT statement that returns data to populate a
	 * number of result objects from which one property will be keyed into a
	 * Map.
	 * 
	 * @param id
	 * @param parameterObject
	 * @param keyProp
	 * @param valueProp
	 * @return A Map keyed by keyProp with values of valueProp.
	 * @throws SQLException
	 * @throws DAOException
	 */
	Map queryForMap(String id, Object parameterObject, String keyProp,
			String valueProp) throws SQLException, DAOException;

}