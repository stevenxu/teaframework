/**
 * @(#)JdbcService.java
 * 
 * Tea Service-Oriented Java/J2EE Application Framework
 * 
 * Copyright(c) Tea Framework Team
 *  
 * Licensed under the GNU LGPL, Version 2.1 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at  
 * 
 * http://www.gnu.org/copyleft/lesser.html
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 * 
 * For more information, please visit:
 * http://sourceforge.net/projects/teaframework
 */

package org.teaframework.services.persistence;

import java.sql.Connection;
import java.sql.SQLException;

import javax.sql.DataSource;

import org.apache.commons.dbutils.ResultSetHandler;
import org.teaframework.exception.DAOException;

/**
 * <p>
 * JDBC persistence service wrapper.
 * </p>
 * 
 * @author <a href="mailto:founder_chen@yahoo.com.cn">Peter Cheng </a>
 * @version $Revision: 1.1 $ $Date: 2006/02/15 08:45:44 $
 * @version Revision: 1.0
 */
public interface JdbcService {

	/**
	 * Set DataSource
	 * 
	 * @param dataSource
	 */
	void setDataSource(DataSource dataSource);

	/**
	 * Execute an SQL SELECT query with a single replacement parameter. The
	 * caller is responsible for connection cleanup.
	 * 
	 * @param conn
	 *            The connection to execute the query in.
	 * @param sql
	 *            The query to execute.
	 * @param param
	 *            The replacement parameter.
	 * @param rsh
	 *            The handler that converts the results into an object.
	 * @return The object returned by the handler.
	 * @throws SQLException
	 */
	Object query(Connection conn, String sql, Object param, ResultSetHandler rsh)
			throws DAOException;

	/**
	 * Execute an SQL SELECT query with replacement parameters. The caller is
	 * responsible for connection cleanup.
	 * 
	 * @param conn
	 *            The connection to execute the query in.
	 * @param sql
	 *            The query to execute.
	 * @param params
	 *            The replacement parameters.
	 * @param rsh
	 *            The handler that converts the results into an object.
	 * @return The object returned by the handler.
	 * @throws SQLException
	 */
	Object query(Connection conn, String sql, Object[] params,
			ResultSetHandler rsh) throws DAOException;

	/**
	 * Execute an SQL SELECT query without any replacement parameters. The
	 * caller is responsible for connection cleanup.
	 * 
	 * @param conn
	 *            The connection to execute the query in.
	 * @param sql
	 *            The query to execute.
	 * @param rsh
	 *            The handler that converts the results into an object.
	 * @return The object returned by the handler.
	 * @throws SQLException
	 */
	Object query(Connection conn, String sql, ResultSetHandler rsh)
			throws DAOException;

	/**
	 * Executes the given SELECT SQL with a single replacement parameter. The
	 * <code>Connection</code> is retrieved from the <code>DataSource</code>.
	 * 
	 * @param sql
	 *            The SQL statement to execute.
	 * @param param
	 *            The replacement parameter.
	 * @param rsh
	 *            The handler used to create the result object from the
	 *            <code>ResultSet</code>.
	 * 
	 * @return An object generated by the handler.
	 * @throws DAOException
	 */
	Object query(String sql, Object param, ResultSetHandler rsh)
			throws DAOException;

	/**
	 * Executes the given SELECT SQL query and returns a result object. The
	 * <code>Connection</code> is retrieved from the <code>DataSource</code>.
	 * 
	 * @param sql
	 *            The SQL statement to execute.
	 * @param params
	 *            Initialize the PreparedStatement's IN parameters with this
	 *            array.
	 * 
	 * @param rsh
	 *            The handler used to create the result object from the
	 *            <code>ResultSet</code>.
	 * 
	 * @return An object generated by the handler.
	 * @throws DAOException
	 */
	Object query(String sql, Object[] params, ResultSetHandler rsh)
			throws DAOException;

	/**
	 * Executes the given SELECT SQL without any replacement parameters. The
	 * <code>Connection</code> is retrieved from the <code>DataSource</code>
	 * set in the constructor.
	 * 
	 * @param sql
	 *            The SQL statement to execute.
	 * @param rsh
	 *            The handler used to create the result object from the
	 *            <code>ResultSet</code>.
	 * 
	 * @return An object generated by the handler.
	 * @throws DAOException
	 */
	Object query(String sql, ResultSetHandler rsh) throws DAOException;

	/**
	 * Execute an SQL INSERT, UPDATE, or DELETE query without replacement
	 * parameters.
	 * 
	 * @param conn
	 *            The connection to use to run the query.
	 * @param sql
	 *            The SQL to execute.
	 * @return The number of rows updated.
	 * @throws SQLException
	 */
	int update(Connection conn, String sql) throws DAOException;

	/**
	 * Execute an SQL INSERT, UPDATE, or DELETE query with a single replacement
	 * parameter.
	 * 
	 * @param conn
	 *            The connection to use to run the query.
	 * @param sql
	 *            The SQL to execute.
	 * @param param
	 *            The replacement parameter.
	 * @return The number of rows updated.
	 * @throws SQLException
	 */
	int update(Connection conn, String sql, Object param) throws DAOException;

	/**
	 * Execute an SQL INSERT, UPDATE, or DELETE query.
	 * 
	 * @param conn
	 *            The connection to use to run the query.
	 * @param sql
	 *            The SQL to execute.
	 * @param params
	 *            The query replacement parameters.
	 * @return The number of rows updated.
	 * @throws DAOException
	 */
	int update(Connection conn, String sql, Object[] params)
			throws DAOException;

	/**
	 * Executes the given INSERT, UPDATE, or DELETE SQL statement without any
	 * replacement parameters. The <code>Connection</code> is retrieved from
	 * the <code>DataSource</code>.
	 * 
	 * @param sql
	 *            The SQL statement to execute.
	 * @throws DAOException
	 * @return The number of rows updated.
	 */
	int update(String sql) throws DAOException;

	/**
	 * Executes the given INSERT, UPDATE, or DELETE SQL statement with a single
	 * replacement parameter. The <code>Connection</code> is retrieved from
	 * the <code>DataSource</code> set in the constructor.
	 * 
	 * @param sql
	 *            The SQL statement to execute.
	 * @param param
	 *            The replacement parameter.
	 * @throws DAOException
	 * @return The number of rows updated.
	 */
	int update(String sql, Object param) throws DAOException;

	/**
	 * Executes the given INSERT, UPDATE, or DELETE SQL statement. The
	 * <code>Connection</code> is retrieved from the <code>DataSource</code>
	 * set in the constructor.
	 * 
	 * @param sql
	 *            The SQL statement to execute.
	 * @param params
	 *            Initializes the PreparedStatement's IN (i.e. '?') parameters.
	 * @throws DAOException
	 * @return The number of rows updated.
	 */
	int update(String sql, Object[] params) throws DAOException;

}