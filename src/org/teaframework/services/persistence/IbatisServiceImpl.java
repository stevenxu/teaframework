/**
 * @(#)IbatisServiceImpl.java
 * 
 * Tea Service-Oriented Java/J2EE Application Framework
 * 
 * Copyright(c) Tea Framework Team
 *  
 * Licensed under the GNU LGPL, Version 2.1 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at  
 * 
 * http://www.gnu.org/copyleft/lesser.html
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 * 
 * For more information, please visit:
 * http://sourceforge.net/projects/teaframework
 */

package org.teaframework.services.persistence;

import java.io.Reader;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.picocontainer.Startable;
import org.teaframework.exception.DAOException;
import org.teaframework.exception.IbatisConfigurationException;

import com.ibatis.common.resources.Resources;
import com.ibatis.common.util.PaginatedList;
import com.ibatis.dao.client.DaoManager;
import com.ibatis.dao.client.DaoManagerBuilder;
import com.ibatis.sqlmap.client.SqlMapClient;
import com.ibatis.sqlmap.client.SqlMapClientBuilder;
import com.ibatis.sqlmap.client.SqlMapSession;
import com.ibatis.sqlmap.client.event.RowHandler;

/**
 * <p>
 * Ibatis persistence service wrapper.
 * </p>
 * 
 * @author <a href="mailto:founder_chen@yahoo.com.cn">Peter Cheng </a>
 * @version $Revision: 1.7 $ $Date: 2006/02/15 08:45:44 $
 * @version Revision: 1.0
 */

public class IbatisServiceImpl implements IbatisService, Startable {
    
    private final Log logger = LogFactory.getLog(getClass());

    private static final String IBATIS_DAO_RESOURCE = "ibatis-dao.xml";

    private static final String IBATIS_SQLMAP_RESOURCE = "ibatis-sqlmap-config.xml";

    private DaoManager daoManager;

    private SqlMapClient sqlMapClient;

    private SqlMapSession session;

    /**
     * Defalut Constructor.
     */
    public IbatisServiceImpl() {
    }

    /**
     * @see org.teaframework.services.persistence.IbatisService#getDaoManager()
     */
    public DaoManager getDaoManager() {
        return this.daoManager;
    }

    private SqlMapClient getSqlMapClient() {
        return this.sqlMapClient;
    }

    /**
     * Returns a single threaded SqlMapSession implementation for use by one
     * user.
     * 
     * @see org.teaframework.services.persistence.IbatisService#openSession()
     */
    public SqlMapSession openSession() throws SQLException {
        if (session != null) {
            session = getSqlMapClient().openSession();
            session.startTransaction();
        }
        return session;
    }

    /**
     * @see org.teaframework.services.persistence.IbatisService#commit()
     */
    public void commit() throws SQLException {
        if (session != null) {
            session.commitTransaction();
        }
    }

    /**
     * @see org.teaframework.services.persistence.IbatisService#closeSession()
     */
    public void closeSession() throws SQLException {
        if (session != null) {
            session.endTransaction();
            session.close();
            session = null;
        }
    }

    /**
     * @see org.picocontainer.Startable#start()
     */
    public void start() {
        try {
            Reader reader = Resources.getResourceAsReader(IBATIS_DAO_RESOURCE);
            Reader sqlMapClientReader = Resources
                    .getResourceAsReader(IBATIS_SQLMAP_RESOURCE);
            daoManager = DaoManagerBuilder.buildDaoManager(reader);
            sqlMapClient = SqlMapClientBuilder
                    .buildSqlMapClient(sqlMapClientReader);
        } catch (Exception e) {
            throw new IbatisConfigurationException(
                    "Failed to initialize Ibatis DaoConfig.  Cause: " + e);
        }
        logger.info("Start ibatis service successful.");
    }

    /**
     * @see org.picocontainer.Startable#stop()
     */
    public void stop() {
    }
    
    /**
     * Executes a mapped SQL INSERT statement. Insert is a bit different from
     * other update methods, as it provides facilities for returning the primary
     * key of the newly inserted row (rather than the effected rows). This
     * functionality is of course optional.
     * 
     * @param id
     * @param parameterObject
     * @return The primary key of the newly inserted row. This might be
     *         automatically generated by the RDBMS, or selected from a sequence
     *         table or other source.
     * @throws SQLException
     * @throws DAOException
     */
    public Object insert(String id, Object parameterObject)
            throws SQLException, DAOException {
        SqlMapSession session;
        Object object;
        try {
            session = openSession();
            object = session.insert(id, parameterObject);
            commit();
        } catch (Exception e) {
            throw new DAOException("Failed to insert - id [" + id
                    + "], parameterObject [" + parameterObject + "]. Cause: "
                    + e, e);
        } finally {
            session = null;
            closeSession();
        }
        return object;
    }

    /**
     * Executes a mapped SQL UPDATE statement. Update can also be used for any
     * other update statement type, such as inserts and deletes. Update returns
     * the number of rows effected.
     * 
     * @param id
     * @param parameterObject
     * @return The number of rows effected.
     * @throws SQLException
     * @throws DAOException
     */
    public int update(String id, Object parameterObject) throws SQLException,
            DAOException {
        SqlMapSession session;
        int rowsNum;
        try {
            session = openSession();
            rowsNum = session.update(id, parameterObject);
            commit();
        } catch (Exception e) {
            throw new DAOException("Failed to update - id [" + id
                    + "], parameterObject [" + parameterObject + "]. Cause: "
                    + e, e);
        } finally {
            session = null;
            closeSession();
        }
        return rowsNum;
    }

    /**
     * Executes a mapped SQL DELETE statement. Delete returns the number of rows
     * effected.
     * 
     * @param id
     * @param parameterObject
     * @return The number of rows effected
     * @throws SQLException
     * @throws DAOException
     */
    public int delete(String id, Object parameterObject) throws SQLException,
            DAOException {
        SqlMapSession session;
        int rowsNum;
        try {
            session = openSession();
            rowsNum = session.delete(id, parameterObject);
            commit();
        } catch (Exception e) {
            throw new DAOException("Failed to delete - id [" + id
                    + "], parameterObject [" + parameterObject + "]. Cause: "
                    + e, e);
        } finally {
            session = null;
            closeSession();
        }
        return rowsNum;
    }

    /**
     * Executes a mapped SQL SELECT statement that returns data to populate a
     * single object instance. <p/>The parameter object is generally used to
     * supply the input data for the WHERE clause parameter(s) of the SELECT
     * statement.
     * 
     * @param id The name of the statement to execute.
     * @param parameterObject The parameter object (e.g. JavaBean, Map, XML
     *            etc.).
     * @return The single result object populated with the result set data.
     */
    public Object queryForObject(String id, Object parameterObject)
            throws SQLException, DAOException {
        SqlMapSession session;
        Object object;
        try {
            session = openSession();
            object = session.queryForObject(id, parameterObject);
            commit();
        } catch (Exception e) {
            throw new DAOException("Failed to execute queryForObject - id ["
                    + id + "], parameterObject [" + parameterObject
                    + "].  Cause: " + e, e);
        } finally {
            session = null;
            closeSession();
        }
        return object;
    }

    /**
     * Executes a mapped SQL SELECT statement that returns data to populate the
     * supplied result object.
     * 
     * @param id
     * @param parameterObject
     * @param resultObject
     * @return The single result object as supplied by the resultObject
     *         parameter, populated with the result set data.
     * @throws SQLException
     * @throws DAOException
     */
    public Object queryForObject(String id, Object parameterObject,
            Object resultObject) throws SQLException, DAOException {
        SqlMapSession session;
        Object object;
        try {
            session = openSession();
            object = session.queryForObject(id, parameterObject, resultObject);
            commit();
        } catch (Exception e) {
            throw new DAOException("Failed to execute queryForObject - id ["
                    + id + "], parameterObject [" + parameterObject
                    + "].  Cause: " + e, e);
        } finally {
            session = null;
            closeSession();
        }
        return object;
    }

    /**
     * Executes a mapped SQL SELECT statement that returns data to populate a
     * number of result objects.
     * 
     * @param id
     * @param parameterObject
     * @return A List of result objects.
     * @throws SQLException
     * @throws DAOException
     */
    public List queryForList(String id, Object parameterObject)
            throws SQLException, DAOException {
        SqlMapSession session;
        List list;
        try {
            session = openSession();
            list = session.queryForList(id, parameterObject);
            commit();
        } catch (Exception e) {
            throw new DAOException("Failed to queryForList - id [" + id
                    + "], parameterObject [" + parameterObject + "].  Cause: "
                    + e, e);
        } finally {
            session = null;
            closeSession();
        }
        return list;
    }

    /**
     * Executes a mapped SQL SELECT statement that returns data to populate a
     * number of result objects within a certain range.
     * 
     * @param id
     * @param parameterObject
     * @param skip
     * @param max
     * @return A List of result objects.
     * @throws SQLException
     * @throws DAOException
     */
    public List queryForList(String id, Object parameterObject, int skip,
            int max) throws SQLException, DAOException {
        SqlMapSession session;
        List list;
        try {
            session = openSession();
            list = session.queryForList(id, parameterObject, skip, max);
            commit();
        } catch (Exception e) {
            throw new DAOException("Failed to queryForList - id [" + id
                    + "], parameterObject [" + parameterObject + "], skip ["
                    + skip + "], max [" + max + "].  Cause: " + e, e);
        } finally {
            session = null;
            closeSession();
        }
        return list;
    }

    /**
     * Executes a mapped SQL SELECT statement that returns a number of result
     * objects that will be handled one at a time by a RowHandler.
     * 
     * @param id
     * @param parameterObject
     * @param rowHandler
     * @throws SQLException
     * @throws DAOException
     */
    public void queryWithRowHandler(String id, Object parameterObject,
            RowHandler rowHandler) throws SQLException, DAOException {
        SqlMapSession session;
        try {
            session = openSession();
            session.queryWithRowHandler(id, parameterObject, rowHandler);
            commit();
        } catch (Exception e) {
            throw new DAOException("Failed to queryForList - id [" + id
                    + "], parameterObject [" + parameterObject
                    + "], rowHandler [ " + rowHandler + "].  Cause: " + e, e);
        } finally {
            session = null;
            closeSession();
        }
    }

    /**
     * Executes a mapped SQL SELECT statement that returns data to populate a
     * number of result objects a page at a time.
     * 
     * @param id
     * @param parameterObject
     * @param pageSize
     * @return A PaginatedList of result objects.
     * @throws SQLException
     * @throws DAOException
     */
    public PaginatedList queryForPaginatedList(String id,
            Object parameterObject, int pageSize) throws SQLException,
            DAOException {
        SqlMapSession session;
        PaginatedList list;
        try {
            session = openSession();
            list = session.queryForPaginatedList(id, parameterObject, pageSize);
            commit();
        } catch (Exception e) {
            throw new DAOException("Failed to queryForPaginatedList - id ["
                    + id + "], parameterObject [" + parameterObject
                    + "], pageSize [" + pageSize + "].  Cause: " + e, e);
        } finally {
            session = null;
            closeSession();
        }
        return list;
    }

    /**
     * Executes a mapped SQL SELECT statement that returns data to populate a
     * number of result objects that will be keyed into a Map.
     * 
     * @param id
     * @param parameterObject
     * @param keyProp
     * @return A Map keyed by keyProp with values being the result object
     *         instance.
     * @throws SQLException
     * @throws DAOException
     */
    public Map queryForMap(String id, Object parameterObject, String keyProp)
            throws SQLException, DAOException {
        SqlMapSession session;
        Map map;
        try {
            session = openSession();
            map = session.queryForMap(id, parameterObject, keyProp);
            commit();
        } catch (Exception e) {
            throw new DAOException("Failed to queryForMap - id [" + id
                    + "], parameterObject [" + parameterObject + "], keyProp ["
                    + keyProp + "].  Cause: " + e, e);
        } finally {
            session = null;
            closeSession();
        }
        return map;
    }

    /**
     * Executes a mapped SQL SELECT statement that returns data to populate a
     * number of result objects from which one property will be keyed into a
     * Map.
     * 
     * @param id
     * @param parameterObject
     * @param keyProp
     * @param valueProp
     * @return A Map keyed by keyProp with values of valueProp.
     * @throws SQLException
     * @throws DAOException
     */
    public Map queryForMap(String id, Object parameterObject, String keyProp,
            String valueProp) throws SQLException, DAOException {
        SqlMapSession session;
        Map map;
        try {
            session = openSession();
            map = session.queryForMap(id, parameterObject, keyProp, valueProp);
            commit();
        } catch (Exception e) {
            throw new DAOException("Failed to queryForMap - id [" + id
                    + "], parameterObject [" + parameterObject + "], keyProp ["
                    + keyProp + "], valueProp [" + valueProp + "].  Cause: "
                    + e, e);
        } finally {
            session = null;
            closeSession();
        }
        return map;
    }
    
}